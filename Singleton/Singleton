Singleton パターン

プログラムを動かす際に、インスタンスが1個しか存在しないことを保証するパターン
・指定したクラスのインスタンスが"絶対に"1個しか存在しないことを保証したい
・インスタンスが1個しか存在しないことをプログラム上で表現したい

・サンプルプログラム
クラス図
-：private
+：public
#：protected（自クラス及びその派生クラス）
下線：staticメソッド

・Singletonクラス
staticフィールド（クラス変数）として singleton が定義され、それをSingletonクラスのインスタンスで初期化する。
この初期化はSingleton クラスのロード時(Classファイル読み込み時)に一度だけ行われる。
Singleton クラスのコンストラクタは private になっている。これは、Singleton クラス外からコンストラクタを呼び出すことを禁止するため。もし、new Singleton() という式がこのクラスの外にあったとしても、コンパイルエラーになる。
そもそもプログラマが注意して new しないようにしてくれれば、コンストラクタを private にする必要はない。しかし、そのようにしたのでは Singleton パターンの存在意義がなくなる。
Singleton パターンは、プログラマがどう間違ってもインスタンスが1個しか生成されないことを保証する、というパターン。
この保証のために、コンストラクタを private にしておく必要がある。

Singleton クラスの唯一のインスタンスを得るメソッドとして、getinstatnce が用意されている。

・実行結果
実行開始後、最初にgetInstance メソッドを呼び出したときに Singleton クラスは初期化される。そのときに static フィールドの初期化が行われ、インスタンスが作られる。

・なぜインスタンスが1個だけという制限を設ける必要があるのか
インスタンスが複数存在すると、インスタンスたちが相互に影響し合って、思いがけないバグを生み出してしまう可能性がある。しかし、インスタンスが1個しかないという保証があれば、その前提条件の下でプログラミングできることになる。